option(ENABLE_CPPCHECK "Enable static analysis with cppcheck" OFF)
option(ENABLE_CLANG_TIDY "Enable static analysis with clang-tidy" OFF)
if (ENABLE_CPPCHECK)
  find_program(CPPCHECK cppcheck)
  if (CPPCHECK)
    set(CMAKE_CXX_CPPCHECK ${CPPCHECK} --enable=all --inconclusive
        --suppress=missingIncludeSystem
        )
  else ()
    message(SEND_ERROR "cppcheck requested but executable not found")
  endif ()
endif ()

if (ENABLE_CLANG_TIDY)
  find_program(CLANGTIDY clang-tidy)
  if (CLANGTIDY)
    set(CMAKE_CXX_CLANG_TIDY ${CLANGTIDY}; "-header-filter='^((?!ui_).)*$'")

    # Files generated by MOC, RCC, and UIC may produce clang-tidy warnings. We
    # generate a dummy .clang-tidy file in the binary directory that disables
    # all clang-tidy checks except one that will never match.  This one check is
    # necessary; clang-tidy reports an error when no checks are enabled. Since
    # the Qt code generators will generate source files in the binary tree,
    # clang-tidy will load the configuration from this dummy file when the
    # sources are built. See:
    # https://gitlab.kitware.com/cmake/cmake/commit/b13bc8659f87567b1b091806d42f5023b2a6b48b
    # https://gitlab.kitware.com/cmake/cmake/-/issues/19772
    file(
        WRITE "${CMAKE_BINARY_DIR}/.clang-tidy"
        "
---
Checks: '-*,llvm-twine-local'
WarningsAsErrors: '0'"
    )
  else ()
    message(SEND_ERROR "clang-tidy requested but executable not found")
  endif ()
endif ()
